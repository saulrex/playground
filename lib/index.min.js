(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("d3"), require("react"), require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["d3", "react", "lodash"], factory);
	else if(typeof exports === 'object')
		exports["showTree"] = factory(require("d3"), require("react"), require("lodash"));
	else
		root["showTree"] = factory(root["d3"], root["React"], root["_"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__7__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin
module.exports = {"node":"showTree-node--to8cW","overlay":"showTree-overlay--3vAxk","link":"showTree-link--1n_gK","templink":"showTree-templink--3QDMp","ghostCircle":"showTree-ghostCircle--QyY2M","show":"showTree-show--_LvsA","activeDrag":"showTree-activeDrag--2HnmW"};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(10);
} else { var jsFeaturesPresent, evalAllowed; }


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__3__;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin
module.exports = {"wrap":"showTree-wrap--18ld5","mtop":"showTree-mtop--3irRk"};

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _style_less__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _style_less__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_less__WEBPACK_IMPORTED_MODULE_3__);
var _class,
    _temp,
    _jsxFileName = "C:\\Users\\Saul\\WebstormProjects\\showTree\\src\\app\\index.jsx";

(function () {
  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).enterModule;
  enterModule && enterModule(module);
})();

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





/**
 * this is ShowTree
 * @param {Array<{ id: number }>} [tree=Array] - tree items here
 * @example
 * import ShowTree from './showTree';
 *
 *  ReactDOM.render(
 *   <ShowTree />,
 *   element
 *  );
 * };
 *
 * runApp();
 */

var ShowTree = (_temp = _class =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(ShowTree, _React$PureComponent);

  function ShowTree() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ShowTree);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShowTree)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "cyRef", react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef());

    _defineProperty(_assertThisInitialized(_this), "init", function () {
      _this.tree = new _tree__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]({
        rootNode: _this.cyRef.current,
        treeData: _this.props.tree ? _this.props.tree : {}
      });

      _this.updateTreeState();
    });

    _defineProperty(_assertThisInitialized(_this), "updateTreeState", function () {
      _this.tree.state.onClickNode = _this.props.onClickNode;
    });

    _defineProperty(_assertThisInitialized(_this), "changeLen", function (len) {
      if (_this.props.len !== len) {
        if (typeof _this.props.onChangeLen === 'function') {
          _this.props.onChangeLen(len);
        }
      }
    });

    return _this;
  }

  _createClass(ShowTree, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.init();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var tree = _ref.tree;

      if (!Object(lodash__WEBPACK_IMPORTED_MODULE_1__["isEqual"])(this.props.tree, tree)) {
        if (!this.tree) {
          return this.init();
        } else {
          this.tree.updateTree(this.props.tree);
        }
      }

      this.updateTreeState();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: _style_less__WEBPACK_IMPORTED_MODULE_3___default.a.wrap,
        ref: this.cyRef,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: _style_less__WEBPACK_IMPORTED_MODULE_3___default.a.mtop,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, !this.props.tree, this.props.maxLen && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "range",
        name: "points",
        min: "1",
        max: this.props.maxLen,
        onChange: function onChange(_ref2) {
          var value = _ref2.target.value;

          _this2.changeLen(+value);
        },
        value: this.props.len,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      })));
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return ShowTree;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent), _defineProperty(_class, "defaultProps", {
  len: 1
}), _temp);
var _default = ShowTree;
/* harmony default export */ __webpack_exports__["a"] = (_default);
;

(function () {
  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).default;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(ShowTree, "ShowTree", "C:\\Users\\Saul\\WebstormProjects\\showTree\\src\\app\\index.jsx");
  reactHotLoader.register(_default, "default", "C:\\Users\\Saul\\WebstormProjects\\showTree\\src\\app\\index.jsx");
})();

;

(function () {
  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).leaveModule;
  leaveModule && leaveModule(module);
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)(module)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__7__;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _style_less__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_less__WEBPACK_IMPORTED_MODULE_1__);
var _temp;

(function () {
  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).enterModule;
  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




var _default = (_temp =
/*#__PURE__*/
function () {
  // Define the zoom function for the zoomable tree
  // define the zoomListener which calls the zoom function on the 'zoom' event constrained within the scaleExtents
  // Helper functions for collapsing and expanding nodes.
  // Function to update the temporary connector indicating dragging affiliation
  // Function to center node when clicked/dropped so node doesn't get lost when collapsing/moving with large amount of children.
  function _default(_ref) {
    var _this = this;

    var _rootNode = _ref.rootNode,
        _ref$treeData = _ref.treeData,
        _treeData = _ref$treeData === void 0 ? [] : _ref$treeData,
        _ref$onDragEnd = _ref.onDragEnd,
        onDragEnd = _ref$onDragEnd === void 0 ? function () {} : _ref$onDragEnd;

    _classCallCheck(this, _default);

    _defineProperty(this, "state", {
      root: undefined,
      tree: undefined,
      links: undefined,
      viewerWidth: undefined,
      viewerHeight: undefined,
      svgGroup: undefined,
      // variables for drag/drop
      selectedNode: null,
      draggingNode: null,
      dragStarted: false,
      panTimer: 0,
      // Calculate total nodes, max label length
      totalNodes: 0,
      maxLabelLength: 0,
      //events
      dragListener: function dragListener() {},
      click: function click() {},
      //bound events
      onClickNode: function onClickNode(node) {},
      //other
      duration: 300 // define a d3 diagonal projection for use by the node paths later on.

    });

    _defineProperty(this, "diagonal", d3__WEBPACK_IMPORTED_MODULE_0__["svg"].diagonal().projection(function (d) {
      return [d.y, d.x];
    }));

    _defineProperty(this, "cleanup", function (rootNode) {
      if (rootNode && rootNode.children && rootNode.children[1]) {
        rootNode.children[1].remove();
      }
    });

    _defineProperty(this, "zoom", function () {
      _this.state.svgGroup.attr('transform', 'translate(' + d3__WEBPACK_IMPORTED_MODULE_0__["event"].translate + ')scale(' + d3__WEBPACK_IMPORTED_MODULE_0__["event"].scale + ')');
    });

    _defineProperty(this, "zoomListener", d3__WEBPACK_IMPORTED_MODULE_0__["behavior"].zoom().scaleExtent([0.1, 3]).on('zoom', this.zoom));

    _defineProperty(this, "update", function (source) {
      // Compute the new height, function counts total children of root node and sets tree height accordingly.
      // This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed
      // This makes the layout more consistent.
      var levelWidth = [1];

      var childCount = function childCount(level, n) {
        if (n.children && n.children.length > 0) {
          if (levelWidth.length <= level + 1) levelWidth.push(0);
          levelWidth[level + 1] += n.children.length;
          n.children.forEach(function (d) {
            childCount(level + 1, d);
          });
        }
      };

      childCount(0, _this.state.root);
      var newHeight = d3__WEBPACK_IMPORTED_MODULE_0__["max"](levelWidth) * 50; // 25 pixels per line

      _this.state.tree = _this.state.tree.size([newHeight, _this.state.viewerWidth]); // Compute the new tree layout.

      _this.state.nodes = _this.state.tree.nodes(_this.state.root).reverse();
      _this.state.links = _this.state.tree.links(_this.state.nodes); // Set widths between levels based on maxLabelLength.

      _this.state.nodes.forEach(function (d) {
        d.y = d.depth * (_this.state.maxLabelLength * 10); //maxLabelLength * 10px
        // alternatively to keep a fixed scale one can set a fixed depth per level
        // Normalize for fixed-depth by commenting out below line
        // d.y = (d.depth * 500); //500px per level.
      }); // Update the nodes…


      var i = 0;

      var node = _this.state.svgGroup.selectAll("g.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node)).data(_this.state.nodes, function (d) {
        return d.id || (d.id = ++i);
      }); // Enter any new nodes at the parent's previous position.


      var nodeEnter = node.enter().append('g').call(_this.state.dragListener).attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node).attr('transform', function (d) {
        return 'translate(' + source.y0 + ',' + source.x0 + ')';
      }).on('click', _this.state.click);
      nodeEnter.append('circle').attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.nodeCircle).attr('r', 5).style('fill', function (d) {
        return d._children ? 'lightsteelblue' : '#fff';
      });
      var TEXT_MARGIN_SIZE = 15;
      nodeEnter.append('text').attr('x', function (d) {
        return d.children || d._children ? -TEXT_MARGIN_SIZE : TEXT_MARGIN_SIZE;
      }).attr('dy', '.35em').attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.nodeText).attr('text-anchor', function (d) {
        return d.children || d._children ? 'end' : 'start';
      }).text(function (d) {
        return d.name;
      }).style('fill-opacity', 0); // phantom node to give us mouseover in a radius around it

      nodeEnter.append('circle').attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle).attr('r', 30).attr('opacity', 0.2) // change this to zero to hide the target area
      .style('fill', 'red').attr('pointer-events', 'mouseover').on('mouseover', function (node) {
        _this.overCircle(node);
      }).on('mouseout', function (node) {
        _this.outCircle(node);
      }); // Update the text to reflect whether node has children or not.

      node.select('text').attr('x', function (d) {
        return d.children || d._children ? -TEXT_MARGIN_SIZE : TEXT_MARGIN_SIZE;
      }).attr('text-anchor', function (d) {
        return d.children || d._children ? 'end' : 'start';
      }).text(function (d) {
        return d.name;
      }); // Change the circle fill depending on whether it has children and is collapsed

      node.select("circle.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.nodeCircle)).attr('r', 4.5).style('fill', function (d) {
        return d._children ? 'lightsteelblue' : '#fff';
      }); // Transition nodes to their new position.

      var nodeUpdate = node.transition().duration(_this.state.duration).attr('transform', function (d) {
        return 'translate(' + d.y + ',' + d.x + ')';
      }); // Fade the text in

      nodeUpdate.select('text').style('fill-opacity', 1); // Transition exiting nodes to the parent's new position.

      var nodeExit = node.exit().transition().duration(_this.state.duration).attr('transform', function (d) {
        return 'translate(' + source.y + ',' + source.x + ')';
      }).remove();
      nodeExit.select('circle').attr('r', 0);
      nodeExit.select('text').style('fill-opacity', 0); // Update the links…

      var link = _this.state.svgGroup.selectAll("path.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.link)).data(_this.state.links, function (d) {
        return d.target.id;
      }); // Enter any new links at the parent's previous position.


      link.enter().insert('path', 'g').attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.link).attr('d', function (d) {
        var o = {
          x: source.x0,
          y: source.y0
        };
        return _this.diagonal({
          source: o,
          target: o
        });
      }); // Transition links to their new position.

      link.transition().duration(_this.state.duration).attr('d', _this.diagonal); // Transition exiting nodes to the parent's new position.

      link.exit().transition().duration(_this.state.duration).attr('d', function (d) {
        var o = {
          x: source.x,
          y: source.y
        };
        return _this.diagonal({
          source: o,
          target: o
        });
      }).remove(); // Stash the old positions for transition.

      _this.state.nodes.forEach(function (d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });
    });

    _defineProperty(this, "collapse", function (d) {
      if (d.children) {
        d._children = d.children;

        d._children.forEach(collapse);

        d.children = null;
      }
    });

    _defineProperty(this, "expand", function (d) {
      if (d._children) {
        d.children = d._children;
        d.children.forEach(expand);
        d._children = null;
      }
    });

    _defineProperty(this, "overCircle", function (d) {
      _this.state.selectedNode = d;

      _this.updateTempConnector();
    });

    _defineProperty(this, "outCircle", function (d) {
      _this.state.selectedNode = null;

      _this.updateTempConnector();
    });

    _defineProperty(this, "updateTempConnector", function () {
      var data = [];

      if (_this.state.draggingNode !== null && _this.state.selectedNode !== null) {
        // have to flip the source coordinates since we did this for the existing connectors on the original tree
        data = [{
          source: {
            x: _this.state.selectedNode.y0,
            y: _this.state.selectedNode.x0
          },
          target: {
            x: _this.state.draggingNode.y0,
            y: _this.state.draggingNode.x0
          }
        }];
      }

      var link = _this.state.svgGroup.selectAll(".".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.templink)).data(data);

      link.enter().append('path').attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.templink).attr('d', d3__WEBPACK_IMPORTED_MODULE_0__["svg"].diagonal()).attr('pointer-events', 'none');
      link.attr('d', d3__WEBPACK_IMPORTED_MODULE_0__["svg"].diagonal());
      link.exit().remove();
    });

    _defineProperty(this, "toStartPosition", function (source, toCenter) {
      var scale = _this.zoomListener.scale();

      var x = -source.y0;
      var y = -source.x0;
      x = x * scale + _this.state.viewerWidth / 2;
      y = y * scale + _this.state.viewerHeight / 2;
      d3__WEBPACK_IMPORTED_MODULE_0__["select"]('g').transition().duration(_this.state.duration).attr('transform', 'translate(' + x + ',' + y + ')scale(' + scale + ')');

      _this.zoomListener.scale(scale);

      _this.zoomListener.translate([x, y]);
    });

    _defineProperty(this, "endDrag", function (domNode) {
      _this.state.selectedNode = null;
      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"](".".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle)).attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle);
      d3__WEBPACK_IMPORTED_MODULE_0__["select"](domNode).attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node); // now restore the mouseover event or we won't be able to drag a 2nd time

      d3__WEBPACK_IMPORTED_MODULE_0__["select"](domNode).select(".".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle)).attr('pointer-events', '');

      _this.updateTempConnector();

      if (_this.state.draggingNode !== null) {
        _this.update(_this.state.root);

        _this.toStartPosition(_this.state.draggingNode);

        _this.state.draggingNode = null;
      }
    });

    _defineProperty(this, "updateTree", function (treeData, toStart) {
      // A recursive helper function for performing some setup by walking through all nodes
      function visit(parent, visitFn, childrenFn) {
        if (!parent) return;
        visitFn(parent);
        var children = childrenFn(parent);

        if (children) {
          var count = children.length;

          for (var i = 0; i < count; i++) {
            visit(children[i], visitFn, childrenFn);
          }
        }
      } // Call visit function to establish maxLabelLength


      visit(treeData, function (_ref2) {
        var _ref2$name = _ref2.name,
            name = _ref2$name === void 0 ? '' : _ref2$name;
        _this.state.totalNodes++;
        _this.state.maxLabelLength = Math.max(name.length, _this.state.maxLabelLength);
      }, function (d) {
        return d.children && d.children.length > 0 ? d.children : null;
      }); // Define the root

      _this.state.root = treeData;
      _this.state.root.x0 = _this.state.viewerHeight / 2;
      _this.state.root.y0 = 0; // Layout the tree initially and center on the root node.

      _this.update(_this.state.root);

      if (toStart) {
        _this.toStartPosition(_this.state.root);
      }
    });

    this.cleanup(_rootNode); // panning variables

    var panSpeed = 200;
    var panBoundary = 20; // Within 20px from edges will pan when dragging.

    this.state.viewerWidth = _rootNode.offsetWidth;
    this.state.viewerHeight = _rootNode.offsetHeight;
    this.state.tree = d3__WEBPACK_IMPORTED_MODULE_0__["layout"].tree().size([this.state.viewerHeight, this.state.viewerWidth]); // // sort the tree according to the node names
    //
    // function sortTree() {
    //   tree.sort(function(a, b) {
    //     return b.name.toLowerCase() < a.name.toLowerCase() ? 1 : -1;
    //   });
    // }
    // // Sort the tree initially incase the JSON isn't in a sorted order.
    // sortTree();
    // TODO: Pan function, can be better implemented.

    var translateX, translateY;

    var pan = function pan(domNode, direction) {
      var speed = panSpeed;

      if (_this.state.panTimer) {
        clearTimeout(_this.state.panTimer);
        var translateCoords = d3__WEBPACK_IMPORTED_MODULE_0__["transform"](_this.state.svgGroup.attr('transform'));

        if (direction == 'left' || direction == 'right') {
          translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;
          translateY = translateCoords.translate[1];
        } else if (direction == 'up' || direction == 'down') {
          translateX = translateCoords.translate[0];
          translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;
        }

        var scaleX = translateCoords.scale[0];
        var scaleY = translateCoords.scale[1];

        var scale = _this.zoomListener.scale();

        _this.state.svgGroup.transition().attr('transform', 'translate(' + translateX + ',' + translateY + ')scale(' + scale + ')');

        d3__WEBPACK_IMPORTED_MODULE_0__["select"](domNode).select("g.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node)).attr('transform', 'translate(' + translateX + ',' + translateY + ')');

        _this.zoomListener.scale(_this.zoomListener.scale());

        _this.zoomListener.translate([translateX, translateY]);

        _this.zoomListener.translate([translateX, translateY]);

        _this.state.panTimer = setTimeout(function () {
          pan(domNode, speed, direction);
        }, 50);
      }
    };

    var initiateDrag = function initiateDrag(d, domNode) {
      _this.state.draggingNode = d;
      d3__WEBPACK_IMPORTED_MODULE_0__["select"](domNode).select(".".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle)).attr('pointer-events', 'none');
      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"](".".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle)).attr('class', "".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.ghostCircle, " ").concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.show));
      d3__WEBPACK_IMPORTED_MODULE_0__["select"](domNode).attr('class', "".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node, " ").concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.activeDrag));

      _this.state.svgGroup.selectAll("g.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node)).sort(function (a, b) {
        // select the parent and sort the path's
        if (a.id != _this.state.draggingNode.id) return 1; // a is not the hovered element, send 'a' to the back
        else return -1; // a is the hovered element, bring 'a' to the front
      }); // if nodes has children, remove the links and nodes


      if (_this.state.nodes.length > 1) {
        // remove link paths
        var links = _this.state.tree.links(_this.state.nodes);

        var nodePaths = _this.state.svgGroup.selectAll("path.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.link)).data(links, function (d) {
          return d.target.id;
        }).remove(); // remove child nodes


        var nodesExit = _this.state.svgGroup.selectAll("g.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.node)).data(_this.state.nodes, function (d) {
          return d.id;
        }).filter(function (d, i) {
          if (d.id == _this.state.draggingNode.id) {
            return false;
          }

          return true;
        }).remove();
      } // remove parent link


      var parentLink = _this.state.tree.links(_this.state.tree.nodes(_this.state.draggingNode.parent));

      _this.state.svgGroup.selectAll("path.".concat(_style_less__WEBPACK_IMPORTED_MODULE_1___default.a.link)).filter(function (d, i) {
        if (d.target.id == _this.state.draggingNode.id) {
          return true;
        }

        return false;
      }).remove();

      _this.state.dragStarted = null;
    }; // define the baseSvg, attaching a class for styling and the zoomListener


    var baseSvg = d3__WEBPACK_IMPORTED_MODULE_0__["select"](_rootNode).append('svg').attr('width', this.state.viewerWidth).attr('height', this.state.viewerHeight).attr('class', _style_less__WEBPACK_IMPORTED_MODULE_1___default.a.overlay).call(this.zoomListener);
    var self = this; // Define the drag listeners for drag/drop behaviour of nodes.

    this.state.dragListener = d3__WEBPACK_IMPORTED_MODULE_0__["behavior"].drag().on('dragstart', function (d) {
      if (d == self.state.root) {
        return;
      }

      self.state.dragStarted = true;
      self.state.nodes = self.state.tree.nodes(d);
      d3__WEBPACK_IMPORTED_MODULE_0__["event"].sourceEvent.stopPropagation(); // it's important that we suppress the mouseover event on the node being dragged. Otherwise it will absorb the mouseover event and the underlying node will not detect it d3.select(this).attr('pointer-events', 'none');
    }).on('drag', function (d) {
      if (d == root) {
        return;
      }

      if (self.state.dragStarted) {
        initiateDrag(d, this);
      } // get coords of mouseEvent relative to svg container to allow for panning


      var relCoords = d3__WEBPACK_IMPORTED_MODULE_0__["mouse"](baseSvg[0][0]);

      if (relCoords[0] < panBoundary) {
        self.state.panTimer = true;
        pan(this, 'left');
      } else if (relCoords[0] > baseSvg[0][0].innerWidth - panBoundary) {
        self.state.panTimer = true;
        pan(this, 'right');
      } else if (relCoords[1] < panBoundary) {
        self.state.panTimer = true;
        pan(this, 'up');
      } else if (relCoords[1] > baseSvg[0][0].innerHeight - panBoundary) {
        self.state.panTimer = true;
        pan(this, 'down');
      } else {
        try {
          clearTimeout(self.state.panTimer);
        } catch (e) {}
      }

      d.x0 += d3__WEBPACK_IMPORTED_MODULE_0__["event"].dy;
      d.y0 += d3__WEBPACK_IMPORTED_MODULE_0__["event"].dx;
      var node = d3__WEBPACK_IMPORTED_MODULE_0__["select"](this);
      node.attr('transform', 'translate(' + d.y0 + ',' + d.x0 + ')');
      self.updateTempConnector();
    }).on('dragend', function (d) {
      if (d == self.state.root) {
        return;
      }

      var domNode = this;

      if (self.state.selectedNode) {
        onDragEnd(self.state.selectedNode); // now remove the element from the parent, and insert it into the new elements children

        var index = self.state.draggingNode.parent.children.indexOf(self.state.draggingNode);

        if (index > -1) {
          self.state.draggingNode.parent.children.splice(index, 1);
        }

        if (typeof self.state.selectedNode.children !== 'undefined' || typeof self.state.selectedNode._children !== 'undefined') {
          if (typeof self.state.selectedNode.children !== 'undefined') {
            self.state.selectedNode.children.push(self.state.draggingNode);
          } else {
            self.state.selectedNode._children.push(self.state.draggingNode);
          }
        } else {
          self.state.selectedNode.children = [];
          self.state.selectedNode.children.push(self.state.draggingNode);
        } // Make sure that the node being added to is expanded so user can see added node is correctly moved


        self.expand(self.state.selectedNode); // sortTree();
      }

      self.endDrag(domNode);
    }); // Toggle children function

    function toggleChildren(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else if (d._children) {
        d.children = d._children;
        d._children = null;
      }

      return d;
    } // Toggle children on click.


    this.state.click = function (d) {
      if (d3__WEBPACK_IMPORTED_MODULE_0__["event"].defaultPrevented) return; // click suppressed

      d = toggleChildren(d);

      _this.update(d);

      _this.toStartPosition(d, true);

      _this.state.onClickNode(d, !d._children);
    }; // Append a group which holds all nodes and which the zoom Listener can act upon.


    this.state.svgGroup = baseSvg.append('g');
    this.updateTree(_treeData, true);
  }

  _createClass(_default, [{
    key: "__reactstandin__regenerateByEval",
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return _default;
}(), _temp);

/* harmony default export */ __webpack_exports__["a"] = (_default);
;

(function () {
  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).default;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(_default, "default", "C:\\Users\\Saul\\WebstormProjects\\showTree\\src\\tree\\index.js");
})();

;

(function () {
  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).leaveModule;
  leaveModule && leaveModule(module);
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)(module)))

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
(function () {
  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).enterModule;
  enterModule && enterModule(module);
})();


var _default = _app__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"];
/* harmony default export */ __webpack_exports__["default"] = (_default);
;

(function () {
  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).default;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(_default, "default", "C:\\Users\\Saul\\WebstormProjects\\showTree\\src\\index.js");
})();

;

(function () {
  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : __webpack_require__(2)).leaveModule;
  leaveModule && leaveModule(module);
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)(module)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var React=_interopDefault(__webpack_require__(3));function AppContainer(e){return React.Children.only(e.children)}var hot_prod=function(){return function(e){return e}},areComponentsEqual=function(e,n){return e===n},setConfig=function(){},cold=function(e){return e},configureComponent=function(){};exports.AppContainer=AppContainer,exports.hot=hot_prod,exports.areComponentsEqual=areComponentsEqual,exports.setConfig=setConfig,exports.cold=cold,exports.configureComponent=configureComponent;


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,